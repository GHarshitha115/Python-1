functions:
	Positional arguments=>constant values(integers,2,'strings',float)
	keyword arguments=>keywords(passing values like(mahi =1,mahi='pyhton'))
	
	positional arguments should follow key word arguments.
	DEFAULT ARGUMENTS
	-->def (name='world',greeting='hello'):
			return 
	NONE would be return if nothing is given

----Examples of function-------
1.
>>> def greet(name='mahesh',greeting='hola'):
...     print(greeting+' '+name+'!')
... 
>>> a=greet('rakesh')
hola rakesh!
>>> a=greet('mahi',greeting='hi')
hi mahi!
>>> assigning_fun=greet
>>> assigning_fun('rakseh')
hola rakseh!
>>> assigning_fun('jp')
hola jp!

------operations-----

>>> def add(a,b):
...     return a+b
... 
>>> def mul(a,b):
...     return a*b
... 
>>> def operate(a,b,operation=add):
...     return operation(a,b)
...    
... 
>>> operate(2,4)
6
>>> operate(2,4,operation=mul)
8

---------------------------
def add(a,b):
	return a+b

def operate(a,b,operation=add):
	return operation(a,b)

a,b=input().split(',')
c=input()
a=float(a)
b=float(b)
operate(a,b,c)

Error/Warning:
Traceback (most recent call last):
  File "main.py", line 13, in <module>
    operate(a,b,c)
  File "main.py", line 6, in operate
    return operation(a,b)
TypeError: 'str' object is not callable


---------------------------------

LAMBDA
	Advantage:
		Used to write a short function in a single line 
	Drawback:
		Difficult to read and understand.
	
#def add(a, b):
#    return (a+b)

Single line using lambda:
	=>add= lambda x, y:x+y


---------------------------------
def append(a,L=[ ]):
	L.append(a)
	return L
append(1)
[ 1 ]
append(2)
[1 , 2]
=>default argument execute only once through out function
Here L is taken as same ID and same object is taken
--------------------------------------------------------------
To overcome this we use the below
''''''''''''''''''^^^^^^^^^^^^^^^'''''''''''''''''''''
def append(a,L=None):
	if L=None:
		L=[ ]
	L.append(a)
	return L
append(1)
[1]
append(2)
[2]
		
Here L is taken as (L=None,L=[ ]) objects are changed so as the ID's 

----------------------------------------------------------------------

def more_kwargs(a,**kwargs):
	print(a)
	print(kwargs)
more_kwargs(1,b=10,c=9,d=5,number=0)

output:
1
{b:10,c:9,d:5,number:0}

passing multiple keyword arguments


-----------------------------------------------------------------------

Comprehension way of writing the lists:

>>> list=[item*2+1 for item in range(0,10)]                                                                                      
>>> list
[1, 3, 5, 7, 9, 11, 13, 15, 17, 19]
>>> list=[item%5==0 for item in range(0,10)]                                                                                     
>>> list
[True, False, False, False, False, True, False, False, False, False]
>>> list=[item%5==0 and list%2==0 for item in range(0,10)]   

>>> list=[item%item==0 for item in range(1,10)]  

>>> list
[True, True, True, True, True, True, True, True, True]
>>> list=[item%item==0 for item in range(2,10)]                                                                                  
>>> list
[True, True, True, True, True, True, True, True]
>>> list=[item%item==0 for item in range(2,10)]
>>> a=2
>>> for a in range(2,10):
...     list=[item%a==0 for item in range(2,10)]                                                                                 
... 
>>> list
[False, False, False, False, False, False, False, True]
>>> a=2
>>> for a in range(2,10):                                                                                                        
...     list=[item%a==0 for item in range(2,10)]
...     a=a+1
... 
>>> list
[False, False, False, False, False, False, False, True]
>>> list=[item+5 for item in range(0,10)]                                                                                        
>>> list
[5, 6, 7, 8, 9, 10, 11, 12, 13, 14]

>>> even_numbers=[items for items in range(0,10,2)]
>>> even_numbers
[0, 2, 4, 6, 8]
>>> even_numbers=[items for items in range(0,10,-2)]
>>> even_numbers
[]
>>> even_numbers=[items for items in range(0,10,2)]
>>> even_numbers=[[items for items in range(0,10,2)]for i in range(10,0,-2)]                                                     
>>> even_numbers
[[0, 2, 4, 6, 8], [0, 2, 4, 6, 8], [0, 2, 4, 6, 8], [0, 2, 4, 6, 8], [0, 2, 4, 6, 8]]
>>> even_numbers=[[items for items in range(0,10,2)]for i in range(10,0,2)]
>>> even_numbers
[]
>>> even_numbers=[[items for items in range(0,10,2)]for i in range(0,10,2)]
>>> even_numbers
[[0, 2, 4, 6, 8], [0, 2, 4, 6, 8], [0, 2, 4, 6, 8], [0, 2, 4, 6, 8], [0, 2, 4, 6, 8]]
>>> even_numbers=[[items for items in range(0,4)]for i in range(0,4)]                                                            
>>> even_numbers
[[0, 1, 2, 3], [0, 1, 2, 3], [0, 1, 2, 3], [0, 1, 2, 3]]

------------------------------------------------------------------------

mapping list with comprehension:


>>> def ctos(n):
...     return str(n)
... 
>>> strings=[ctos(n) for n in range(0,10)]                                                                                       
>>> strings
['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']
>>> def ctos(n):
...     return float(n)
... 
>>> strings=[ctos(n) for n in range(0,10)]
>>> strings
[0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0]
>>> def ctos(n):
...     return chr(n)
... 
>>> strings=[ctos(n) for n in range(97,123)]
>>> strings
['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']

-------------------------------------------------------------------------

Unpacking the dictionary items:
==> 
d = {10:'ten' , 9:'nine' , 11:'eleven}

for k,v in d:
	print(k,v)

10 ten
9 nine 
11 eleven

Sorted by the Key values
==>
d = {10:'ten' , 9:'nine' , 11:'eleven}

keys = list(d.keys())
keys.sort( )

for each_key in keys:
	print(each_key,d[each_key])
9 nine
10 ten
11 eleven



--------------------------- Tuples --------------------------------------------


>>> mixed=(0.5,'mahesh',5)
>>> type(mixed)
<class 'tuple'>
>>> mixed[1]
'mahesh'
>>> mixed[::-1]
(5, 'mahesh', 0.5)
>>> mixed
(0.5, 'mahesh', 5)
>>> mixed[:2:-2]
()
>>> mixed[2::-2]
(5, 0.5)
>>>
>>> empty_tuple=()
>>> type(empty_tuple)
<class 'tuple'>
>>> single_tuple=(22,)
>>> type(single_tuple)
<class 'tuple'>
>>> not_tuple=(22)
>>> type(not_tuple)
<class 'int'>
>>> my_tuple=(1,2,3,'mahi',0.5)
>>> a,b,c,d,e=my_tuple
>>> a
1
>>> b
2
>>> c
3
>>> d
'mahi'
>>> e
0.5
>>> a,b=my_tuple
>>> a
'mahesh'
>>> b
'mahi'
>>> a=123,0.345,'mahi'
>>> type(a)
<class 'tuple'>
>>> a
(123, 0.345, 'mahi')
>>> a=123,
>>> type(a)
<class 'tuple'>
>>> a=123,0.345,'mahi'
>>> a
(123, 0.345, 'mahi')

>>> a=(1,'hey',1.2,[1,2])
>>> a[:-1]
(1, 'hey', 1.2)
>>> a[-1][1]
2
>>> a[-1][1]
2
>>> a[:-1:-1]
()
>>> a[-1][-1]=10
>>> a
(1, 'hey', 1.2, [1, 10])
>>> a[-1][0]='HOLA'
>>> a
(1, 'hey', 1.2, ['HOLA', 10])
>>> a[-1][0]='AMIGO'
>>> a[-1][1]='AMIGO'
>>> a
(1, 'hey', 1.2, ['AMIGO', 'AMIGO'])
>>> a[-1][0]='HOLA'
>>> a
(1, 'hey', 1.2, ['HOLA', 'AMIGO'])
>>> def get_sum_and_product(a,b):
...     return a*b,a+b
...
>>> a,b=get_sum_and_product(5,3)
>>> a
15
>>> b
8

-------------Fuction calling of tuple with *args----------------
>>> def more_args(*args):
...     print(args)
... 
>>> more_args(0,10)
(0, 10)
>>> more_args(range(0,10))
(range(0, 10),)
>>> more_args(*range(0,10))
(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
>>> more_args(*range(0,15))                                                                                                      
(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)
>>> more_args(*range(0,15,2))
(0, 2, 4, 6, 8, 10, 12, 14)
>>> a=[1,2,3,4]
>>> more_args(*a)                                                                                                                
(1, 2, 3, 4)
>>> more_args(a)                                                                                                                 
([1, 2, 3, 4],)
----------------------------------------------------------
>>> range(5,100,2)[-4]
93
>>> max(range(5,100,2))
99
>>> max(range(100,5,-2))
100
>>> min(range(100,5,-2))
6
>>> (1,232,4,8).index(8)                                                                                                         
3
>>> (1,2,34,56,67,231,123).count('12')                                                                                           
0
>>> (1,2,34,56,67,231,123).count('123')                                                                                          
0
>>> (1,2,34,56,67,231,123).count(123)                                                                                            
1
>>> [1,2,3,4].append(55)
>>> a=[1,2,3,4].append(56)
>>> a
       
---------------------------------------File Handling--------------------------------------------------------
       
f = open('python/module.txt','r')

print(f.name)

f.close()

By using the below conditions that are written and by selectting the path(i.e- 'python/module') we can use to read the files within our directory 

with open('python/module.txt') as f:
	f_contents = f.read()
	print(f_contents)
	
Disadvantage:
1.By reading the entire data we may have more usage of memory but to over come it we usec
with open('python/module.txt') as f:
	f_contents = f.readlines()   #readlines are gives the whole file in the output
	print(f_contents)
	
2.To get it one line we use "f_contents = f.readline()" where the values are are prined line by line

for line in f:
    print(line,end='')

To create the specified size we can use a argument like the int values to be set as limit
    f_contents = f.read(100)
    print(f_contents)       #prints the 1st hundred(100) characters.


with open('python/test.txt','w') as f:
	f.write('Test')
	f.seek(0)
	f.write('Test')
	
-----------------------------------------JSON------------------------------------------------------
	
import json

user_data = '''{
  "states": [
    {
      "name": "Alabama",
      "abbreviation": "AL",
      "area_codes": ["205", "251", "256", "334", "938"]
    },
    {
      "name": "Alaska",
      "abbreviation": "AK",
      "area_codes": ["907"]
    },
    {
      "name": "Arizona",
      "abbreviation": "AZ",
      "area_codes": ["480", "520", "602", "623", "928"]
    },
    {
      "name": "Arkansas",
      "abbreviation": "AR",
      "area_codes": ["479", "501", "870"]
    },
    {
      "name": "California",
      "abbreviation": "CA",
      "area_codes": ["209", "213", "310", "323", "408", "415", "424", "442", "510", "530", "559", "562", "619", "626", "628", "650", "657", "661", "669", "707", "714", "747", "760", "805", "818", "831", "858", "909", "916", "925", "949", "951"]
    },
    {
      "name": "Colorado",
      "abbreviation": "CO",
      "area_codes": ["303", "719", "720", "970"]
    },
    {
      "name": "Connecticut",
      "abbreviation": "CT",
      "area_codes": ["203", "475", "860", "959"]
    },
    {
      "name": "Delaware",
      "abbreviation": "DE",
      "area_codes": ["302"]
    },
    {
      "name": "Florida",
      "abbreviation": "FL",
      "area_codes": ["239", "305", "321", "352", "386", "407", "561", "727", "754", "772", "786", "813", "850", "863", "904", "941", "954"]
    },
    {
      "name": "Georgia",
      "abbreviation": "GA",
      "area_codes": ["229", "404", "470", "478", "678", "706", "762", "770", "912"]
    },
    {
      "name": "Hawaii",
      "abbreviation": "HI",
      "area_codes": ["808"]
    },
    {
      "name": "Idaho",
      "abbreviation": "ID",
      "area_codes": ["208"]
    },
    {
      "name": "Illinois",
      "abbreviation": "IL",
      "area_codes": ["217", "224", "309", "312", "331", "618", "630", "708", "773", "779", "815", "847", "872"]
    },
    {
      "name": "Indiana",
      "abbreviation": "IN",
      "area_codes": ["219", "260", "317", "463", "574", "765", "812", "930"]
    },
    {
      "name": "Iowa",
      "abbreviation": "IA",
      "area_codes": ["319", "515", "563", "641", "712"]
    },
    {
      "name": "Kansas",
      "abbreviation": "KS",
      "area_codes": ["316", "620", "785", "913"]
    },
    {
      "name": "Kentucky",
      "abbreviation": "KY",
      "area_codes": ["270", "364", "502", "606", "859"]
    },
    {
      "name": "Louisiana",
      "abbreviation": "LA",
      "area_codes": ["225", "318", "337", "504", "985"]
    },
    {
      "name": "Maine",
      "abbreviation": "ME",
      "area_codes": ["207"]
    },
    {
      "name": "Maryland",
      "abbreviation": "MD",
      "area_codes": ["240", "301", "410", "443", "667"]
    },
    {
      "name": "Massachusetts",
      "abbreviation": "MA",
      "area_codes": ["339", "351", "413", "508", "617", "774", "781", "857", "978"]
    },
    {
      "name": "Michigan",
      "abbreviation": "MI",
      "area_codes": ["231", "248", "269", "313", "517", "586", "616", "734", "810", "906", "947", "989"]
    },
    {
      "name": "Minnesota",
      "abbreviation": "MN",
      "area_codes": ["218", "320", "507", "612", "651", "763", "952"]
    },
    {
      "name": "Mississippi",
      "abbreviation": "MS",
      "area_codes": ["228", "601", "662", "769"]
    },
    {
      "name": "Missouri",
      "abbreviation": "MO",
      "area_codes": ["314", "417", "573", "636", "660", "816"]
    },
    {
      "name": "Montana",
      "abbreviation": "MT",
      "area_codes": ["406"]
    },
    {
      "name": "Nebraska",
      "abbreviation": "NE",
      "area_codes": ["308", "402", "531"]
    },
    {
      "name": "Nevada",
      "abbreviation": "NV",
      "area_codes": ["702", "725", "775"]
    },
    {
      "name": "New Hampshire",
      "abbreviation": "NH",
      "area_codes": ["603"]
    },
    {
      "name": "New Jersey",
      "abbreviation": "NJ",
      "area_codes": ["201", "551", "609", "732", "848", "856", "862", "908", "973"]
    },
    {
      "name": "New Mexico",
      "abbreviation": "NM",
      "area_codes": ["505", "575"]
    },
    {
      "name": "New York",
      "abbreviation": "NY",
      "area_codes": ["212", "315", "332", "347", "516", "518", "585", "607", "631", "646", "680", "716", "718", "845", "914", "917", "929", "934"]
    },
    {
      "name": "North Carolina",
      "abbreviation": "NC",
      "area_codes": ["252", "336", "704", "743", "828", "910", "919", "980", "984"]
    },
    {
      "name": "North Dakota",
      "abbreviation": "ND",
      "area_codes": ["701"]
    },
    {
      "name": "Ohio",
      "abbreviation": "OH",
      "area_codes": ["216", "220", "234", "330", "380", "419", "440", "513", "567", "614", "740", "937"]
    },
    {
      "name": "Oklahoma",
      "abbreviation": "OK",
      "area_codes": ["405", "539", "580", "918"]
    },
    {
      "name": "Oregon",
      "abbreviation": "OR",
      "area_codes": ["458", "503", "541", "971"]
    },
    {
      "name": "Pennsylvania",
      "abbreviation": "PA",
      "area_codes": ["215", "267", "272", "412", "484", "570", "610", "717", "724", "814", "878"]
    },
    {
      "name": "Rhode Island",
      "abbreviation": "RI",
      "area_codes": ["401"]
    },
    {
      "name": "South Carolina",
      "abbreviation": "SC",
      "area_codes": ["803", "843", "854", "864"]
    },
    {
      "name": "South Dakota",
      "abbreviation": "SD",
      "area_codes": ["605"]
    },
    {
      "name": "Tennessee",
      "abbreviation": "TN",
      "area_codes": ["423", "615", "629", "731", "865", "901", "931"]
    },
    {
      "name": "Texas",
      "abbreviation": "TX",
      "area_codes": ["210", "214", "254", "281", "325", "346", "361", "409", "430", "432", "469", "512", "682", "713", "737", "806", "817", "830", "832", "903", "915", "936", "940", "956", "972", "979"]
    },
    {
      "name": "Utah",
      "abbreviation": "UT",
      "area_codes": ["385", "435", "801"]
    },
    {
      "name": "Vermont",
      "abbreviation": "VT",
      "area_codes": ["802"]
    },
    {
      "name": "Virginia",
      "abbreviation": "VA",
      "area_codes": ["276", "434", "540", "571", "703", "757", "804"]
    },
    {
      "name": "Washington",
      "abbreviation": "WA",
      "area_codes": ["206", "253", "360", "425", "509"]
    },
    {
      "name": "West Virginia",
      "abbreviation": "WV",
      "area_codes": ["304", "681"]
    },
    {
      "name": "Wisconsin",
      "abbreviation": "WI",
      "area_codes": ["262", "414", "534", "608", "715", "920"]
    },
    {
      "name": "Wyoming",
      "abbreviation": "WY",
      "area_codes": ["307"]
    }
  ]
}
'''

data = json.loads(user_data)

print(type(data))

#By importing the json_data we can perform operations and can load it again:

for user_json_data in data['states']:
    del user_json_data['area_codes']
    
new_str = json.dumps(data,indent=2)

print(new_str)


------------------------------------------COLLECTIONS-----------------------------------------------------
COLLECTIONS

We can use the "ChainMap" (i.e to get the individual keys from two dictionaries)



namedtuple() =>factory function for creating tuple subclasses with named fields
deque        =>list-like container with fast appends and pops on either end
ChainMap     =>dict-like class for creating a single view of multiple mappings
Counter      =>dict subclass for counting hashable objects
OrderedDict  =>dict subclass that remembers the order entries were added
defaultdict  =>dict subclass that calls a factory function to supply missing values
UserDict     =>wrapper around dictionary objects for easier dict subclassing
UserList     =>wrapper around list objects for easier list subclassing
UserString   =>wrapper around string objects for easier string subclassing

import collections
from collections import deque
de_q=deque('abc')

print(de_q) #a,b,c

de_q.rotate(-1) #b,c,a
print(de_q)

de_q.rotate(1) #a,b,c
print(de_q)


import collections
from collections import OrderedDict

ordered_dict={}
ordered_dict['Name']='Mahesh'
ordered_dict['Country']='India'
ordered_dict['State']='AndhraPradesh'

print(ordered_dict)

ordered_dict = OrderedDict(ordered_dict)
print(ordered_dict)

import itertools
from itertools import product
print(list(product([1,2,3],[2,3,5])))

[(1, 2), (1, 3), (1, 5), (2, 2), (2, 3), (2, 5), (3, 2), (3, 3), (3, 5)]

-----------------------------------------------------------------------------------------------

import math
dic_format={'mahi':100,'rakhi':200}
for key in dic_format:
	print(f'{key:10} ==> {dic_format[key]:10}')
print('12'.zfill(5))
print(math.ceil(5.456)) #6
print(math.ceil(6.4654))#7
print(math.floor(5.456))#5
print(math.floor(6.4655))#6

-----------------------------------------------------------------------------------------------

json.dump(obj, fp, *, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, default=None, sort_keys=False, **kw)¶

json.load(fp, *, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None, **kw)¶


import json
def as_complex(dct):
    if '__complex__' in dct:
        return complex(dct['real'],dct['imag'])
    return dct

print(json.loads('{"__complex__":true,"real":1,"imag":2}',object_hook=as_complex)) #1+2j

'''
object_hook is an optional function that will be called with the result of any object literal decoded (a dict). 
The return value of object_hook will be used instead of the dict. 
This feature can be used to implement custom decoders (e.g. JSON-RPC class hinting).
'''

import decimal
>>> json.loads('1.1', parse_float=decimal.Decimal) #Decimal(1.1)

'''
parse_float, if specified, will be called with the string of every JSON float to be decoded.
By default, this is equivalent to float(num_str). 
This can be used to use another datatype or parser for JSON floats (e.g. decimal.Decimal).
'''
-----------------------------------------------------------------------------------------------
import itertools 

'''
counter=itertools.count(start=5,step=5) #step=-2.5

print(next(counter)) #5
print(next(counter)) #10
print(next(counter)) #15

for num in counter:
    print(num) #infinite loop

print(next(counter))
print(next(counter))
print(next(counter))
data = [100,200,300,400]
we want to pair it up to so we can use count to any amount of data

data = [100,200,300,400]
daily_data = list(zip(itertools.count(),data))
print(daily_data)  #[(0, 100), (1, 200), (2, 300), (3, 400)]
'''

import itertools
data = [100,200,300,400]
daily_data = list(itertools.zip_longest(range(10),data))
print(daily_data)  #[(0, 100), (1, 200), (2, 300), (3, 400), (4, None), (5, None), (6, None), (7, None), (8, None), (9, None)]


**************** Doubts Section ***************







**************************************************


******************* Suggestions******************






**************************************************


--------- Editing part-2------------------
>>> pairs=[]
>>> for caps in ['A','B','C']:
...     for small in ['a','b','c']:
...         paris.append(caps+small)
...
>>> pairs=[]
>>> for caps in ['A','B','C']:
...     for small in ['a','b','c']:
...         pairs.append(caps+small)
... 
>>> pairs
['Aa', 'Ab', 'Ac', 'Ba', 'Bb', 'Bc', 'Ca', 'Cb', 'Cc']

2.
------------







































Help on class list in module builtins:

class list(object)
 |  list() -> new empty list
 |  list(iterable) -> new list initialized from iterable's items
 |  
 |  
 |  Methods defined here:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __delitem__(self, key, /)
 |      Delete self[key].
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(...)
 |      x.__getitem__(y) <==> x[y]
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __iadd__(self, value, /)
 |      Implement self+=value.
 |  
 |  __imul__(self, value, /)
 |      Implement self*=value.
 |  
 |  __init__(self, /, *args, **kwargs)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __reversed__(...)
 |      L.__reversed__() -- return a reverse iterator over the list
 |  
 |  __rmul__(self, value, /)
 |      Return value*self.
 |  
 |  __setitem__(self, key, value, /)
 |      Set self[key] to value.
 |  
 |  __sizeof__(...)
 |      L.__sizeof__() -- size of L in memory, in bytes
 |  
 |  append(...)
Help on class list in module builtins:

class list(object)
 |  list() -> new empty list
 |  list(iterable) -> new list initialized from iterable's items
 |  
 |  Methods defined here:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __delitem__(self, key, /)
 |      Delete self[key].
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(...)
 |      x.__getitem__(y) <==> x[y]
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __iadd__(self, value, /)
 |      Implement self+=value.
 |  
 |  __imul__(self, value, /)
 |      Implement self*=value.
 |  
 |  __init__(self, /, *args, **kwargs)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __reversed__(...)
 |      L.__reversed__() -- return a reverse iterator over the list
 |  
 |  __rmul__(self, value, /)
 |      Return value*self.
 |  
 |  __setitem__(self, key, value, /)
>>> a
>>> q







































Help on class tuple in module builtins:

class tuple(object)
 |  tuple() -> empty tuple
 |  tuple(iterable) -> tuple initialized from iterable's items
 |  
 |  If the argument is a tuple, the return value is the same object.
 |  
 |  Methods defined here:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __getnewargs__(...)
 |  
Help on class tuple in module builtins:

class tuple(object)
 |  tuple() -> empty tuple
Help on class tuple in module builtins:

class tuple(object)
 |  tuple() -> empty tuple
 |  tuple(iterable) -> tuple initialized from iterable's items
 |  
 |  If the argument is a tuple, the return value is the same object.
 |  
 |  Methods defined here:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __getnewargs__(...)
 |  
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'q' is not defined
>>> print(a)
None
>>> index(4)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'index' is not defined
>>> a.index(s)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'NoneType' object has no attribute 'index'
>>> (1,2,3,43,34).count(4)
0
>>> a=(1,2,3,4)
>>> a.
a.count(  a.index(  
>>> a.index(2)
1
>>> help()

Welcome to Python 3.6's help utility!

If this is your first time using Python, you should definitely check out
the tutorial on the Internet at https://docs.python.org/3.6/tutorial/.

Enter the name of any module, keyword, or topic to get help on writing
Python programs and using Python modules.  To quit this help utility and
return to the interpreter, just type "quit".

To get a list of available modules, keywords, symbols, or topics, type
"modules", "keywords", "symbols", or "topics".  Each module also comes
with a one-line summary of what it does; to list the modules whose name
or summary contain a given string such as "spam", type "modules spam".

help> list

help> tuple

help> hnnh n
No Python documentation found for 'hnnh n'.
Use help() to get the interactive help utility.
Use help(str) for help on the str class.

help> 4d
No Python documentation found for '4d'.
Use help() to get the interactive help utility.
Use help(str) for help on the str class.

help> 6rje556
No Python documentation found for '6rje556'.
Use help() to get the interactive help utility.
Use help(str) for help on the str class.

help> 

You are now leaving help and returning to the Python interpreter.
If you want to ask for help on a particular object directly from the
interpreter, you can type "help(object)".  Executing "help('string')"
has the same effect as typing a particular string at the help> prompt.
>>> 98tg,
  File "<stdin>", line 1
    98tg,
       ^
SyntaxError: invalid syntax
>>> a='she sells sea shells on a seashore'
>>> a.count(s)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 's' is not defined
>>> a.count('s')
8
>>> (1,200)<(2,1)
True
>>> [1,(20,'Old'),500]<[1,(20,'Mahi),600]
  File "<stdin>", line 1
    [1,(20,'Old'),500]<[1,(20,'Mahi),600]
                                        ^
SyntaxError: EOL while scanning string literal
>>> [1,(20,'Old'),500]<[1,(20,'Mahi'),600]
False
>>> word='hi'
>>> a,b=word
>>> a
'h'
>>> b
'i'
>>> a,c,b=range(3)
>>> a
0
>>> b
2
>>> c
1
>>> a,b,c=['mahi',1,6.6]
>>> a
'mahi'
>>> b
1
>>> c
6.6
>>> [1,2,3]<[1,2,3]
False
>>> [1,2,3]<=[1,2,3]
True
>>> [1,2,3,[4,3,5]]<[1,2,3,4]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: '<' not supported between instances of 'list' and 'int'
>>> a=['parle','dairymilk','goodday','parle']
>>> set(a)
{'parle', 'goodday', 'dairymilk'}
>>> a
['parle', 'dairymilk', 'goodday', 'parle']
>>> b=['kitkat','mango','apple']
>>> set(a-b)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: unsupported operand type(s) for -: 'list' and 'list'
>>> set(a,b)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: set expected at most 1 arguments, got 2
>>> set(a+b)
{'dairymilk', 'parle', 'apple', 'kitkat', 'mango', 'goodday'}
>>> set(a-'parle')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: unsupported operand type(s) for -: 'list' and 'str'
>>> set(b-a)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: unsupported operand type(s) for -: 'list' and 'list'
>>> a
['parle', 'dairymilk', 'goodday', 'parle']
>>> b
['kitkat', 'mango', 'apple']
>>> set(a+b)
{'dairymilk', 'parle', 'apple', 'kitkat', 'mango', 'goodday'}
>>> b.append('dairymilk')
>>> b
['kitkat', 'mango', 'apple', 'dairymilk']
>>> set(a+b)
{'dairymilk', 'parle', 'apple', 'kitkat', 'mango', 'goodday'}
>>> set(a-b)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: unsupported operand type(s) for -: 'list' and 'list'
>>> c=set(a+b)
>>> c
{'dairymilk', 'parle', 'apple', 'kitkat', 'mango', 'goodday'}
>>> 'apple' in c:
  File "<stdin>", line 1
    'apple' in c:
                ^
SyntaxError: invalid syntax
>>> 'apple' in c
True
>>> a[1] in c
True
>>> a[3] in c
True
>>> b[1] in c
True
>>> len(c)
6
>>> len(b)
4
>>> for i in {10,9,7}:
...     print(i)
... 
9
10
7
>>> for i in {10,9,7}:
...     print(i)
... 
9
10
7
>>> for i in {5,6,7,78}
  File "<stdin>", line 1
    for i in {5,6,7,78}
                      ^
SyntaxError: invalid syntax
>>> for i in {5,6,7,78}:
...     print(i)







































Help on class set in module builtins:

class set(object)
 |  set() -> new empty set object
 |  set(iterable) -> new set object
 |  
 |  Build an unordered collection of unique elements.
 |  
 |  Methods defined here:
 |  
 |  __and__(self, value, /)
 |      Return self&value.
 |  
 |  __contains__(...)
 |      x.__contains__(y) <==> y in x.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __iand__(self, value, /)
 |      Return self&=value.
 |  
 |  __init__(self, /, *args, **kwargs)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __ior__(self, value, /)
 |      Return self|=value.
 |  
 |  __isub__(self, value, /)
 |      Return self-=value.
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __ixor__(self, value, /)
 |      Return self^=value.
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  __or__(self, value, /)
 |      Return self|value.
 |  
 |  __rand__(self, value, /)
 |      Return value&self.
 |  
 |  __reduce__(...)
 |      Return state information for pickling.
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __ror__(self, value, /)
 |      Return value|self.
 |  
 |  __rsub__(self, value, /)
 |      Return value-self.
 |  
 |  __rxor__(self, value, /)
 |      Return value^self.
 |  
 |  __sizeof__(...)
 |      S.__sizeof__() -> size of S in memory, in bytes
 |  
 |  __sub__(self, value, /)
 |      Return self-value.
 |  
 |  __xor__(self, value, /)
 |      Return self^value.
 |  
 |  add(...)
 |      Add an element to a set.
 |      
 |      This has no effect if the element is already present.
 |  
 |  clear(...)
 |      Remove all elements from this set.
 |  
 |  copy(...)
 |      Return a shallow copy of a set.
 |  
 |  difference(...)
 |      Return the difference of two or more sets as a new set.
 |      
 |      (i.e. all elements that are in this set but not the others.)
 |  
 |  difference_update(...)
 |      Remove all elements of another set from this set.
 |  
 |  discard(...)
 |      Remove an element from a set if it is a member.
 |      
 |      If the element is not a member, do nothing.
 |  
 |  intersection(...)
 |      Return the intersection of two sets as a new set.
 |      
 |      (i.e. all elements that are in both sets.)
 |  
 |  intersection_update(...)
 |      Update a set with the intersection of itself and another.
... 
78
5
6
7
>>> for i in {5,6,7,78}:
...     print(i)                                                                                                                 
... 
78
5
6
7
>>> '5star' in {'dairymilk', 'parle', 'apple', 'kitkat', 'mango', 'goodday'}
False
>>> 'kitkat' in {'dairymilk', 'parle', 'apple', 'kitkat', 'mango', 'goodday'}
True
>>> index('parle')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'index' is not defined
>>> set
set(      setattr(  
>>> help()

Welcome to Python 3.6's help utility!

If this is your first time using Python, you should definitely check out
the tutorial on the Internet at https://docs.python.org/3.6/tutorial/.

Enter the name of any module, keyword, or topic to get help on writing
Python programs and using Python modules.  To quit this help utility and
return to the interpreter, just type "quit".

To get a list of available modules, keywords, symbols, or topics, type
"modules", "keywords", "symbols", or "topics".  Each module also comes
with a one-line summary of what it does; to list the modules whose name
or summary contain a given string such as "spam", type "modules spam".

help> set

help> q

You are now leaving help and returning to the Python interpreter.
If you want to ask for help on a particular object directly from the
interpreter, you can type "help(object)".  Executing "help('string')"
has the same effect as typing a particular string at the help> prompt.
>>> a - b
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: unsupported operand type(s) for -: 'list' and 'list'
>>> a
['parle', 'dairymilk', 'goodday', 'parle']
>>> a=set(a)
>>> a
{'parle', 'goodday', 'dairymilk'}
>>> b=set(b)
>>> b
{'apple', 'kitkat', 'dairymilk', 'mango'}
>>> a-b
{'parle', 'goodday'}
>>> a+b
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: unsupported operand type(s) for +: 'set' and 'set'
>>> a|b
{'kitkat', 'mango', 'dairymilk', 'parle', 'goodday', 'apple'}
>>> a&b
{'dairymilk'}
>>> a^b
{'parle', 'apple', 'kitkat', 'mango', 'goodday'}
>>> a={1,2,3,4}
>>> b={4,5,6}
>>> a-b
{1, 2, 3}
>>> b-a
{5, 6}
>>> a&b
{4}
>>> a|b
{1, 2, 3, 4, 5, 6}
>>> a^b
{1, 2, 3, 5, 6}
>>> a=range(1,10,2)
>>> a
range(1, 10, 2)
>>> a=set(range(1,10,2))
>>> a
{1, 3, 5, 7, 9}
>>> a=set(range(10,2))
>>> a
set()
>>> a=set(range(0,10,2))
>>> a
{0, 2, 4, 6, 8}
>>> b=set(range(1,10,2))
>>> b
{1, 3, 5, 7, 9}
>>> a
a        abs(     all(     and      any(     as       ascii(   assert   
>>> set
set(      setattr(  
>>> a<b
False
>>> b<==b
  File "<stdin>", line 1
    b<==b
       ^
SyntaxError: invalid syntax
>>> a<=b
False
>>> b<=b
True
>>> .add
  File "<stdin>", line 1
    .add
    ^
SyntaxError: invalid syntax
>>> a
{0, 2, 4, 6, 8}
>>> b
{1, 3, 5, 7, 9}
>>> a.add(7)
>>> a
{0, 2, 4, 6, 7, 8}
>>> a.remove(2,3)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: remove() takes exactly one argument (2 given)
>>> a.remove(3)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
KeyError: 3
>>> a.remove('3')                                                                                                                
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
KeyError: '3'
>>> a.remove(2)
>>> a
{0, 4, 6, 7, 8}
>>> a.clear()
>>> a
set()
>>> a={1,234,6.34,'amhi'}
>>> a.remove('amhi')
>>> a
{1, 234, 6.34}
>>> a.add('mahi')
>>> a
{1, 6.34, 'mahi', 234}
>>> b
{1, 3, 5, 7, 9}
>>> b.add('hello')
>>> a
{1, 6.34, 'mahi', 234}
>>> b
{1, 3, 5, 7, 9, 'hello'}
>>> line='She sells sea shells on a sea shore'
>>> {word.lower() for word in line.split()}
{'a', 'sells', 'shore', 'shells', 'sea', 'she', 'on'}
>>> {c.lower() for c in line if c!=0}                                                                                   
{'a', 'l', 'o', 's', 'r', 'h', 'e', 'n', ' '}
>>> {c.lower() for c in line if c!=' '}
{'a', 'l', 'o', 's', 'r', 'h', 'e', 'n'}
>>> {c.upper() for c in line if c!=' '}                                                                                          
{'A', 'O', 'R', 'E', 'S', 'L', 'N', 'H'}
>>> line='i jumped over a golden brown fox'
>>> {c.upper() for c in line if c!=' '}
{'M', 'A', 'O', 'I', 'R', 'W', 'U', 'E', 'L', 'F', 'B', 'J', 'G', 'D', 'V', 'X', 'N', 'P'}
>>> a={c.upper() for c in line if c!=' '}                                                                                        
>>> a
{'M', 'A', 'O', 'I', 'R', 'W', 'U', 'E', 'L', 'F', 'B', 'J', 'G', 'D', 'V', 'X', 'N', 'P'}
>>> len(a)
18
>>> {c.upper() for c in line if c!=' '}
- [ ] 


from requests import get
url = 'http://www.imdb.com/search/title?release_date=2017&sort=num_votes,desc&page=1'
response = get(url)
#print(response.text[:500])
from bs4 import BeautifulSoup
html_soup = BeautifulSoup(response.text,'html.parser')
#print(type(html_soup))
for movie_container in  html_soup.find_all('div',class_='lister-item mode-advanced'):
    print(movie_container.a.text)
'''    
print(type(movie_container))
print(len(movie_container))
first_movie = movie_container
print(first_movie.prettify())
'''











