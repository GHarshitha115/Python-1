no.of lines increase     ---> we use functions
no.of functions increase ---> we use modules
(Modular Programming) 
Adv:
    1.Breaking large files (simplicity)
    2.More mangable (Easy Maintenance)
    3.Reusability
    4.Scoping
    
---------------------------------------------------------------------------------------------------    

Executing as module

1.It will be executed only once what we have written in the code
2.Because of it when we called it taken as module and printed outcome
>>> import my_module
Hello World
3.When we called it second time then it will not print anything.
>>> import my_module
>>> 

def print_helloworld():
	print('Hello World')

print_helloworld()

gaddam-mahesh:~/environment $ cd python
gaddam-mahesh:~/environment/python $ python3
>>> import my_module
Hello World
>>> import my_module
>>> 
>>> 

---------------------------------------------------------------------------------------------------    

Executing as script

1.Running the entire files.

gaddam-mahesh:~/environment $ cd python
gaddam-mahesh:~/environment/python $ python3 my_module.py
Hello World
gaddam-mahesh:~/environment/python $ python3 my_module.py
Hello World



---------------------------------------------------------------------------------------------------    

How to reload the module without exit() in interpreter:

def print_helloworld():
	print('Hello World')

def print_one():
	print('1')

print(__name__)

print_helloworld()
print_one()

let us assume that we have assed a function in the module where you are already in the interpreter but you have to check whether it then:

we use:
*Reloading module contd..*
->Using reload function from importlib to reload module again.

Take an example that i have added a function print_one:
->so in line 6 i wanted to get the output but i have already in the interpreter,so it throws error(AttributeError: module 'my_module' has no attribute 'print_one')
->So by using the reload module control we get output i.e (print_one()),unless without using this function it throws error.
  >>> from importlib import reload
  >>> reload(my_module)



1.>>> import my_module
2.Hello World
3.>>> import my_module
4.>>>
5.>>> my_module.print_helloworld()
Hello World
6.>>> my_module.print_one()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: module 'my_module' has no attribute 'print_one'
7.>>> from importlib import reload
8.>>> reload(my_module)
my_module
Hello World
<module 'my_module' from '/home/ec2-user/environment/python/my_module.py'>
9.>>> from importlib import reload
10.>>> reload(my_module)
my_module
Hello World
<module 'my_module' from '/home/ec2-user/environment/python/my_module.py'>
11.>>> my_module.print_one()



-------------------------------------------------------------------------------------------------------

gaddam-mahesh:~/environment $ cd python_sample_package
gaddam-mahesh:~/environment/python_sample_package $ cd ..
gaddam-mahesh:~/environment $ cd python_sample_package/
gaddam-mahesh:~/environment/python_sample_package $ python3
Python 3.6.8 (default, Aug  2 2019, 17:42:44) 
[GCC 4.8.5 20150623 (Red Hat 4.8.5-28)] on linux
Python 3.6.8 (default, Aug  2 2019, 17:42:44) [GCC 4.8.5 20150623 (Red Hat 4.8.5-28)] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> import echo
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ModuleNotFoundError: No module named 'echo'
>>> import sound.effects
sound package is getting imported!
effects package is getting imported!
>>> import sound.effects.echo
Module echo.py has been loaded!
>>> import sound.effects.echo.fun1()
  File "<stdin>", line 1
    import sound.effects.echo.fun1()
                                  ^
SyntaxError: invalid syntax
>>> sound.effects.echo.fun1()                    
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: module 'sound.effects.echo' has no attribute 'fun1'
>>> sound.effects.echo.func
sound.effects.echo.func1(
sound.effects.echo.func2(
sound.effects.echo.func3(
>>> sound.effects.echo.func
sound.effects.echo.func1(
sound.effects.echo.func2(
sound.effects.echo.func3(
>>> sound.effects.echo.func1(
... 
... 
... 
... )
echo function func1 has been called!
>>> sound.effects.echo.func2()
echo function func2 has been called!
>>> sound.effects.echo.func3()                   
echo function func3 has been called!
>>> from sound.effects import echo
>>> echo.fun1()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: module 'sound.effects.echo' has no attribute 'fun1'
>>> echo.func1()
echo function func1 has been called!
>>> from sound.effects import reverse
Module reverse.py has been loaded!
>>> reverse.func1()
reverse function func1 has been called!
>>> from sound.filters import equalizer
filters package is getting imported!
Module equalizer.py has been loaded!
>>> equalizer.fuc1()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: module 'sound.filters.equalizer' has no attribute 'fuc1'
>>> equalizer.func1()
equalizer function func1 has been called!
  File "<stdin>", line 1
    from sound.effects.echo from func1
                               ^
SyntaxError: invalid syntax
>>> from sound.effects.echo import func1         
>>> fun1()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'fun1' is not defined
>>> func1()
echo function func1 has been called!
>>> from sound.effects.echo import *
>>> func2()
echo function func2 has been called!
>>> func3()
echo function func3 has been called!
>>> func1()
echo function func1 has been called!
>>> func3()
echo function func3 has been called!
>>> from sound.effects
sound.effects
>>> from sound.effects.
sound.effects.echo     sound.effects.reverse  
>>> from sound.
sound.effects  sound.filters  
>>> from sound.effects import *
>>> echo.func
echo.func1(  echo.func2(  echo.func3(  
>>> echo.func1()
echo function func1 has been called!
>>> from sound.effects import *
>>> 
>>> from importlib import reload
>>> reload(sound)
sound package is getting imported!
<module 'sound' from '/home/ec2-user/environment/python_sample_package/sound/__init__.py'>
>>> from sound.effects import *                                                                                                  
>>> exit()
gaddam-mahesh:~/environment/python_sample_package $ pythom3
bash: pythom3: command not found
gaddam-mahesh:~/environment/python_sample_package $ python3
Python 3.6.8 (default, Aug  2 2019, 17:42:44) 
[GCC 4.8.5 20150623 (Red Hat 4.8.5-28)] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> from sound.effects import *                                                                      
sound package is getting imported!
effects package is getting imported!
Module echo.py has been loaded!
Module reverse.py has been loaded!
Module surround.py has been loaded!
>>> from importlib import reload
>>> reload(sound)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'sound' is not defined
>>> from sound.effects import *
>>> exit()
gaddam-mahesh:~/environment/python_sample_package $ python3
Python 3.6.8 (default, Aug  2 2019, 17:42:44) 
[GCC 4.8.5 20150623 (Red Hat 4.8.5-28)] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> from sound.effects import *
sound package is getting imported!
effects package is getting imported!
Module echo.py has been loaded!
Module reverse.py has been loaded!
>>> from importlib import reload
>>> reload(sound.effects)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'sound' is not defined
>>> reload(echo)
Module echo.py has been loaded!
<module 'sound.effects.echo' from '/home/ec2-user/environment/python_sample_package/sound/effects/echo.py'>
>>> 
>>> 
>>> 
>>> from sound.effects import *


-------------------------------------------------------------------------------------------------------

import random
#value = random.randint(0,1)
#print(value)
'''
greeting = ['Hello','Hi','Hey','Howdy','Hola']
value = random.choice(greeting)
print(value+' Mahi!')

colors = ['Red',"Black","Blue"]
results = random.choice(colors,weights=[50,50,75],k=10)
print(results)'''
deck = list(range(1,53))

#random.shuffle(deck )

print(deck)


-----------------------------------------------------------------------------------------------------------

import datetime

tdy = datetime.date.today()
print(tdy)
print(tdy.day)
print(tdy.weekday())
print(tdy.isoweekday())



import datetime

tdy =datetime.date.today()

#tdelta = datetime.timedelta(days=7)

#print(tdy+tdelta)

#print(tdy-tdelta)

#timedelta is used to get differences or adding of time and represented as (tdelta)

#date2 = date1 + timedelta
#timedelta = date1 + date2

bday = datetime.date(2020 , 5 ,14)

till_bday=bday-tdy#this is time delta where we are using it to differences

print(till_bday)

print(till_bday.total_seconds())


import datetime 

dt = datetime.datetime(2016,12,31,12,35,45,1000)

tdelta = datetime.timedelta(days=7)

print(dt)

print(dt+tdelta)

import datetime
import pytz


#dt_today = datetime.datetime.today()
#dt_now = datetime.datetime.now()
#dt_utcnow = datetime.datetime.utcnow()

#print(dt_today)
#print(dt_now)
#print(dt_utcnow)

#dt = datetime.datetime(2016,7,26,12,30,45,tzinfo=pytz.UTC)
#print(dt)

#dt_now = datetime.datetime.now(tz=pytz.UTC)
#print(dt_now)

#dt_utcnow = datetime.datetime.utcnow().now(tz=pytz.UTC)
#print(dt_utcnow)

#for tz in pytz.all_timezones:
#	print(tz)

#dt_india = datetime.datetime.now()
#dt_east = dt_india.astimezone(ptyz.timezone('US/Eastern'))
#print(dt_east)
#print(dt_india)

dt_india = datetime.datetime.now(tz=pytz.timezone('US/Mountain'))
#india_tz = pytz.timezone('')
print(dt_india.strftime('%B %d %Y'))

dt_str = 'March 04 2020'

dt = datetime.datetime.strptime(dt_str,'%B %d %Y')
print(dt)

#strftime - datetime_to_string
#strptime - string_to_datetime

-----------------------------------------------------------------------------------------------

def cheeseshop(item,*arguments,**keywords):              
    print('--What kind of item do you want,sir?',item)
    print('--We are out of that item',item)
    for arg in arguments:
        print(arg)
    print('-'*40)
    for kw in keywords:
        print(kw,':',keywords[kw])




cheeseshop("Limburger", "It's very runny, sir.",  
           "It's really very, VERY runny, sir.",
           shopkeeper="Michael Palin",
           client="John Cleese",
           sketch="Cheese Shop Sketch")

#(*arguments)--take any number of arguments.
#(**keywords)--take (key,value)pair as tuple format.
#When we are calling the function if we pass parameters as 
        cheeseshop("Limburger",
           shopkeeper="Michael Palin",
           client="John Cleese",
           sketch="Cheese Shop Sketch",
           "It's very runny, sir.",  
           "It's really very, VERY runny, sir.",)
and formal arguments are taken as fun(item,**keywords,*arguments)--Then it throws syntax error because it consists of format
(Positional argument,Key word argument,Positional argument)

-----------------------------------------------------------------------------------------------

We can use the zip file to pack known ,Unknown by the taking the inputs for 
Ex:
    
    Ques=['Name','Age','Gender']
    Ans =input('Name,Age,Gender:').split(',')
    for q,a in zip(Ques,Ans):
        print(f'What is your {q}?,  It is {a}')
    
    output:
    Name,Age,Gender:mahi,22,M
    What is your Name?,  It is mahi
    What is your Age?,  It is 22
    What is your Gender?,  It is M

-----------------------------------------------------------------------------------------------

def fib(n):
    a,b=0,1
    while a<n:
        print(a,end=' ')
        a,b=b,a+b
    print()

fib(5)
 
-----------------------------------------------------------------------------------------------
           
import json 

user_data='''{ "people":[
                        {
                            "name":"mahi",
                            "age":"22",
                            "Licence":true
                        },
                        {
                            "name":"rakesh",
                            "age":"23",
                            "Licence":false
                        }
                        ]}'''

data = json.loads(user_data)
print(data)
print(type(data['people']))
#print(data)
for user in data['people']:
    del user['age']



By using the loads we can load the string kind of data into the json :

Steps to convert the dictionary stored objects into the string (i.e to load the data to json ):
1.Use the multi-string line quotes to convert to a string.
2.If it is dictionary then use the (" ")double quotes to take the (variables)key,values.
3.To do opearrtions on the string that is loaded into json we can convertit to list and perform the operations.
Ex:   print(type(data['people']))   #Converted to list.
4.Operations performed ==>for user in data['people']:
                              del user['age']


Then to convert the data back to the object that is taken we can use the keyword 'json.dumps'

1.We can simply write to check the data is converted or not by 
    new_string = json.dumps(data)
Where this will give a single line output,To overcome this we use "indent" so that we can set the intendations
    new_string = json.dumps(data,indent=2)
Where this will be printed with proper intendation we set but to sort the values or keys we use the "sort_keys" or "sort_items".
    new_string = json.dumps(data,indent=2,sort_keys=True)
new_string = json.dumps(data,indent=2,sort_keys=True)

print(new_string)

Output:
        #<class 'list'> where as type will be list while we perform in the  list          vvvf
{
    "people": [
    {
      "Licence": true,
      "name": "mahi"
    },
    {
      "Licence": false,
      "name": "rakesh"
    }
        ]
}

-----------------------------------------------------------------------------------------------

import os
os.mkdir('OS-Demo-2') #create a file in the current repositary
os.rmdir('OS-Demo-2') #Delete a file in the current repositary
print(os.listdir())   #To get the entire files like a list that are in the repositary we use the syyntax=>os.listdir()


#To know the dirpath,dirnames,filenames we use the syntax => os.walk('Path-name')
we get in the format of three tuples and here we get the three values i.e written in the loops
It started at the currect path and it goes into each file in the environment and untill the tree ends it will print the data.


for dirpath,dirnames,filenames in os.walk('/home/ec2-user/environment'):
    print('Current Path:',dirpath)
    print('Directories:',dirnames)
    print('Files:',filenames)
    print()
  
Use:
    You know you missed a file you can check through the os.walk() method or get the tree structure
           


print(os.environ.get('HOME'))
=> We can get the home directory by printing the above line we will get the home directory(i.e '/home/ec2-user' is my home directory)

os.path(MODULE)
=>It is easy to define paths of the directory by using this 

file_path = os.path.join(os.environ.get('HOME'),'text.txt')
print(file_path)

os.path.exit('path')#To check whether this file exits or not
os.path.file('path')

print(dir(os.path)) #To check the different of methods in this os.path methods.

#os.path.join is used to get the path correctly where the relative path is given correctly including '/'.
file_path = os.path.join(os.environ.get('HOME'),'text.txt')
print(file_path)
output:     
       /home/ec2-user//text.txt
---------------------------------------------------------------------------------------------------    

       
f = open('python/module.txt','r')

print(f.name)

f.close()

By using the below conditions that are written and by selectting the path(i.e- 'python/module') we can use to read the files within our directory 

with open('python/module.txt') as f:
	f_contents = f.read()
	print(f_contents)
	
Disadvantage:
1.By reading the entire data we may have more usage of memory but to over come it we usec
with open('python/module.txt') as f:
	f_contents = f.readlines()   #readlines are gives the whole file in the output
	print(f_contents)
	
2.To get it one line we use "f_contents = f.readline()" where the values are are prined line by line

for line in f:
    print(line,end='')

To create the specified size we can use a argument like the int values to be set as limit
    f_contents = f.read(100)
    print(f_contents)       #prints the 1st hundred(100) characters.


with open('python/test.txt','w') as f:
	f.write('Test')
	f.seek(0)
	f.write('Test')
	
-----------------------------------------------------------------------------------------------
	
import json

user_data = '''{
  "states": [
    {
      "name": "Alabama",
      "abbreviation": "AL",
      "area_codes": ["205", "251", "256", "334", "938"]
    },
    {
      "name": "Alaska",
      "abbreviation": "AK",
      "area_codes": ["907"]
    },
    {
      "name": "Arizona",
      "abbreviation": "AZ",
      "area_codes": ["480", "520", "602", "623", "928"]
    },
    {
      "name": "Arkansas",
      "abbreviation": "AR",
      "area_codes": ["479", "501", "870"]
    },
    {
      "name": "California",
      "abbreviation": "CA",
      "area_codes": ["209", "213", "310", "323", "408", "415", "424", "442", "510", "530", "559", "562", "619", "626", "628", "650", "657", "661", "669", "707", "714", "747", "760", "805", "818", "831", "858", "909", "916", "925", "949", "951"]
    },
    {
      "name": "Colorado",
      "abbreviation": "CO",
      "area_codes": ["303", "719", "720", "970"]
    },
    {
      "name": "Connecticut",
      "abbreviation": "CT",
      "area_codes": ["203", "475", "860", "959"]
    },
    {
      "name": "Delaware",
      "abbreviation": "DE",
      "area_codes": ["302"]
    },
    {
      "name": "Florida",
      "abbreviation": "FL",
      "area_codes": ["239", "305", "321", "352", "386", "407", "561", "727", "754", "772", "786", "813", "850", "863", "904", "941", "954"]
    },
    {
      "name": "Georgia",
      "abbreviation": "GA",
      "area_codes": ["229", "404", "470", "478", "678", "706", "762", "770", "912"]
    },
    {
      "name": "Hawaii",
      "abbreviation": "HI",
      "area_codes": ["808"]
    },
    {
      "name": "Idaho",
      "abbreviation": "ID",
      "area_codes": ["208"]
    },
    {
      "name": "Illinois",
      "abbreviation": "IL",
      "area_codes": ["217", "224", "309", "312", "331", "618", "630", "708", "773", "779", "815", "847", "872"]
    },
    {
      "name": "Indiana",
      "abbreviation": "IN",
      "area_codes": ["219", "260", "317", "463", "574", "765", "812", "930"]
    },
    {
      "name": "Iowa",
      "abbreviation": "IA",
      "area_codes": ["319", "515", "563", "641", "712"]
    },
    {
      "name": "Kansas",
      "abbreviation": "KS",
      "area_codes": ["316", "620", "785", "913"]
    },
    {
      "name": "Kentucky",
      "abbreviation": "KY",
      "area_codes": ["270", "364", "502", "606", "859"]
    },
    {
      "name": "Louisiana",
      "abbreviation": "LA",
      "area_codes": ["225", "318", "337", "504", "985"]
    },
    {
      "name": "Maine",
      "abbreviation": "ME",
      "area_codes": ["207"]
    },
    {
      "name": "Maryland",
      "abbreviation": "MD",
      "area_codes": ["240", "301", "410", "443", "667"]
    },
    {
      "name": "Massachusetts",
      "abbreviation": "MA",
      "area_codes": ["339", "351", "413", "508", "617", "774", "781", "857", "978"]
    },
    {
      "name": "Michigan",
      "abbreviation": "MI",
      "area_codes": ["231", "248", "269", "313", "517", "586", "616", "734", "810", "906", "947", "989"]
    },
    {
      "name": "Minnesota",
      "abbreviation": "MN",
      "area_codes": ["218", "320", "507", "612", "651", "763", "952"]
    },
    {
      "name": "Mississippi",
      "abbreviation": "MS",
      "area_codes": ["228", "601", "662", "769"]
    },
    {
      "name": "Missouri",
      "abbreviation": "MO",
      "area_codes": ["314", "417", "573", "636", "660", "816"]
    },
    {
      "name": "Montana",
      "abbreviation": "MT",
      "area_codes": ["406"]
    },
    {
      "name": "Nebraska",
      "abbreviation": "NE",
      "area_codes": ["308", "402", "531"]
    },
    {
      "name": "Nevada",
      "abbreviation": "NV",
      "area_codes": ["702", "725", "775"]
    },
    {
      "name": "New Hampshire",
      "abbreviation": "NH",
      "area_codes": ["603"]
    },
    {
      "name": "New Jersey",
      "abbreviation": "NJ",
      "area_codes": ["201", "551", "609", "732", "848", "856", "862", "908", "973"]
    },
    {
      "name": "New Mexico",
      "abbreviation": "NM",
      "area_codes": ["505", "575"]
    },
    {
      "name": "New York",
      "abbreviation": "NY",
      "area_codes": ["212", "315", "332", "347", "516", "518", "585", "607", "631", "646", "680", "716", "718", "845", "914", "917", "929", "934"]
    },
    {
      "name": "North Carolina",
      "abbreviation": "NC",
      "area_codes": ["252", "336", "704", "743", "828", "910", "919", "980", "984"]
    },
    {
      "name": "North Dakota",
      "abbreviation": "ND",
      "area_codes": ["701"]
    },
    {
      "name": "Ohio",
      "abbreviation": "OH",
      "area_codes": ["216", "220", "234", "330", "380", "419", "440", "513", "567", "614", "740", "937"]
    },
    {
      "name": "Oklahoma",
      "abbreviation": "OK",
      "area_codes": ["405", "539", "580", "918"]
    },
    {
      "name": "Oregon",
      "abbreviation": "OR",
      "area_codes": ["458", "503", "541", "971"]
    },
    {
      "name": "Pennsylvania",
      "abbreviation": "PA",
      "area_codes": ["215", "267", "272", "412", "484", "570", "610", "717", "724", "814", "878"]
    },
    {
      "name": "Rhode Island",
      "abbreviation": "RI",
      "area_codes": ["401"]
    },
    {
      "name": "South Carolina",
      "abbreviation": "SC",
      "area_codes": ["803", "843", "854", "864"]
    },
    {
      "name": "South Dakota",
      "abbreviation": "SD",
      "area_codes": ["605"]
    },
    {
      "name": "Tennessee",
      "abbreviation": "TN",
      "area_codes": ["423", "615", "629", "731", "865", "901", "931"]
    },
    {
      "name": "Texas",
      "abbreviation": "TX",
      "area_codes": ["210", "214", "254", "281", "325", "346", "361", "409", "430", "432", "469", "512", "682", "713", "737", "806", "817", "830", "832", "903", "915", "936", "940", "956", "972", "979"]
    },
    {
      "name": "Utah",
      "abbreviation": "UT",
      "area_codes": ["385", "435", "801"]
    },
    {
      "name": "Vermont",
      "abbreviation": "VT",
      "area_codes": ["802"]
    },
    {
      "name": "Virginia",
      "abbreviation": "VA",
      "area_codes": ["276", "434", "540", "571", "703", "757", "804"]
    },
    {
      "name": "Washington",
      "abbreviation": "WA",
      "area_codes": ["206", "253", "360", "425", "509"]
    },
    {
      "name": "West Virginia",
      "abbreviation": "WV",
      "area_codes": ["304", "681"]
    },
    {
      "name": "Wisconsin",
      "abbreviation": "WI",
      "area_codes": ["262", "414", "534", "608", "715", "920"]
    },
    {
      "name": "Wyoming",
      "abbreviation": "WY",
      "area_codes": ["307"]
    }
  ]
}
'''

data = json.loads(user_data)

print(type(data))

#By importing the json_data we can perform operations and can load it again:

for user_json_data in data['states']:
    del user_json_data['area_codes']
    
new_str = json.dumps(data,indent=2)

print(new_str)


-----------------------------------------------------------------------------------------------
https://docs.python.org/3.9/library/

COLLECTIONS

We can use the "ChainMap" (i.e to get the individual keys from two dictionaries)



namedtuple() =>factory function for creating tuple subclasses with named fields
deque        =>list-like container with fast appends and pops on either end
ChainMap     =>dict-like class for creating a single view of multiple mappings
Counter      =>dict subclass for counting hashable objects
OrderedDict  =>dict subclass that remembers the order entries were added
defaultdict  =>dict subclass that calls a factory function to supply missing values
UserDict     =>wrapper around dictionary objects for easier dict subclassing
UserList     =>wrapper around list objects for easier list subclassing
UserString   =>wrapper around string objects for easier string subclassing

import collections
from collections import deque
de_q=deque('abc')

print(de_q) #a,b,c

de_q.rotate(-1) #b,c,a
print(de_q)

de_q.rotate(1) #a,b,c
print(de_q)


import collections
from collections import OrderedDict

ordered_dict={}
ordered_dict['Name']='Mahesh'
ordered_dict['Country']='India'
ordered_dict['State']='AndhraPradesh'

print(ordered_dict)

ordered_dict = OrderedDict(ordered_dict)
print(ordered_dict)

import itertools
from itertools import product
print(list(product([1,2,3],[2,3,5])))

[(1, 2), (1, 3), (1, 5), (2, 2), (2, 3), (2, 5), (3, 2), (3, 3), (3, 5)]

-----------------------------------------------------------------------------------------------

import math
dic_format={'mahi':100,'rakhi':200}
for key in dic_format:
	print(f'{key:10} ==> {dic_format[key]:10}')
print('12'.zfill(5))
print(math.ceil(5.456)) #6
print(math.ceil(6.4654))#7
print(math.floor(5.456))#5
print(math.floor(6.4655))#6

-----------------------------------------------------------------------------------------------

json.dump(obj, fp, *, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, default=None, sort_keys=False, **kw)¶

json.load(fp, *, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None, **kw)¶


import json
def as_complex(dct):
    if '__complex__' in dct:
        return complex(dct['real'],dct['imag'])
    return dct

print(json.loads('{"__complex__":true,"real":1,"imag":2}',object_hook=as_complex)) #1+2j

'''
object_hook is an optional function that will be called with the result of any object literal decoded (a dict). 
The return value of object_hook will be used instead of the dict. 
This feature can be used to implement custom decoders (e.g. JSON-RPC class hinting).
'''

import decimal
>>> json.loads('1.1', parse_float=decimal.Decimal) #Decimal(1.1)

'''
parse_float, if specified, will be called with the string of every JSON float to be decoded.
By default, this is equivalent to float(num_str). 
This can be used to use another datatype or parser for JSON floats (e.g. decimal.Decimal).
'''
-----------------------------------------------------------------------------------------------
import itertools 

'''
counter=itertools.count(start=5,step=5) #step=-2.5

print(next(counter)) #5
print(next(counter)) #10
print(next(counter)) #15

for num in counter:
    print(num) #infinite loop

print(next(counter))
print(next(counter))
print(next(counter))
data = [100,200,300,400]
we want to pair it up to so we can use count to any amount of data

data = [100,200,300,400]
daily_data = list(zip(itertools.count(),data))
print(daily_data)  #[(0, 100), (1, 200), (2, 300), (3, 400)]
'''

import itertools
data = [100,200,300,400]
daily_data = list(itertools.zip_longest(range(10),data))
print(daily_data)  #[(0, 100), (1, 200), (2, 300), (3, 400), (4, None), (5, None), (6, None), (7, None), (8, None), (9, None)]

-----------------------------------------------------------------------------------------------

'''
   import datetime
print(datetime.time.min)
print(datetime.time.max)

00:00:00
23:59:59.999999
'''

'''
from datetime import datetime , timezone
local_time = datetime.now(timezone.utc).astimezone()
print(local_time)
print(local_time.isoformat())
#2020-03-11 04:18:13.601664+00:00
#2020-03-11T04:19:43.450265+00:00

#2020-03-11 04:31:27.935663+00:00
#2020-03-11T04:31:27.935663+00:00

'''

'''
from datetime import datetime , timedelta ,date
date1 = date(2014,5,22)
date2 = date(2014,5,26)
print(type(date1))
for n in range(int((date2-date1).days)+1):
	print((date1+timedelta(n)))
	
<class 'datetime.date'>
2014-05-22
2014-05-23
2014-05-24
2014-05-25
'''
-----------------------------------------------------------------------------------------------

import re 
sentence = '''Never let you down Take my horse to th32452344e old town roa12d
123.345.657
800-345-325
900-423-132
823.334.234'''
x = re.compile(r'[89]00[-.]\d\d\d[.-]\d\d\d')
matches = x.finditer(sentence)

for match in matches:
	print(match)
'''
<_sre.SRE_Match object; span=(76, 87), match='800-345-325'>
<_sre.SRE_Match object; span=(88, 99), match='900-423-132'>
'''
import re

sentence = '''
adfwoeDFGHroqw asGHJKdfouoewoqfj adKJHGfjeiw dLKJHsfgwortw
123-123-134
345-243-236
085-480-097

ha haha

cat
mat 
pat
bat
Mr. Scharr
Mr Smith
Mr Dasrr
Mrs. Pfksf
'''

'''

----------OUTPUTS----------------------
x = re.compile(r'[^b]at')
,(r'[a-zA-Z]') -->Matches
,(r'[^a-zA-Z'])
<_sre.SRE_Match object; span=(106, 109), match='cat'>
<_sre.SRE_Match object; span=(110, 113), match='mat'>
<_sre.SRE_Match object; span=(115, 118), match='pat'>


pattern = re.compile(r'\d{3}.\d{3}.\d{3}')
matches = pattern.finditer(sentence)
<_sre.SRE_Match object; span=(106, 109), match='cat'>
<_sre.SRE_Match object; span=(110, 113), match='mat'>
<_sre.SRE_Match object; span=(115, 118), match='pat'>

pattern = re.compile(r'Mr\.?\s[A-Z]\w+')
matches = pattern.finditer(sentence)
<_sre.SRE_Match object; span=(123, 133), match='Mr. Scharr'>
<_sre.SRE_Match object; span=(134, 142), match='Mr Smith'>
<_sre.SRE_Match object; span=(143, 151), match='Mr Dasrr'>


pattern = re.compile
pattern = re.compile(r'M(r|s|rs).?\s[A-Z]\w+') or =>(r'(Mr|Mrs).?\s[A-Z]\w+')

matches = pattern.finditer(sentence)

<_sre.SRE_Match object; span=(123, 133), match='Mr. Scharr'>
<_sre.SRE_Match object; span=(134, 142), match='Mr Smith'>
<_sre.SRE_Match object; span=(143, 151), match='Mr Dasrr'>
<_sre.SRE_Match object; span=(152, 162), match='Mrs. Pfksf'>

'''

pattern = re.compile(r'(Mr|Mrs).?\s[A-Z]\w+')
matches = pattern.finditer(sentence)

""""""""""""""""""""""""""""""""""""""""""""""
emails = '''
CoreyMSchafer@gmail.com
corey.schafer@university.edu
corey-321-schafer@my-work.net
'''
'''
pattern = re.compile(r'[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+')
# [a-zA-Z0-9_.+-] --> Matches lower case , Upper case , Numbers ,(_)
<_sre.SRE_Match object; span=(1, 24), match='CoreyMSchafer@gmail.com'>
<_sre.SRE_Match object; span=(25, 53), match='corey.schafer@university.edu'>
<_sre.SRE_Match object; span=(54, 83), match='corey-321-schafer@my-work.net'>

for match in matches:
	print(match)

'''
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
import re

urls = '''
https://www.google.com
http://coreyms.com
https://youtube.com
https://www.nasa.gov
'''

pattern = re.compile(r'https?://(www\.)?(\w+)(\.\w+)')
'''

https://www.google.com
http://coreyms.com
https://youtube.com
https://www.nasa.gov

#When we are grouping like this we can group the entire things and can print what data we wanted to -->
#Here group(0) resembles entire match
#Here group(1) resembles the www. (or) none
#Here group(2) resembles the domain_names --> (google,coreyms,youtube,nasa)
#Here group(3) resembles the top-level domain_name -->(.com.gov)
matches = pattern.finditer(urls)

for match in matches:
	print(match.group(3))
	
#match object has a group method 
'''
subbed_urls = pattern.sub(r'\2\3',urls)

print(subbed_urls)
	
----------------------------------------BeautifulSoup--------------------------------------------------------------------------

import requests
from bs4 import BeautifulSoup

source = requests.get('http://coreyms.com').text

soup = BeautifulSoup(source,'lxml')

for article in soup.find_all('article'):
    headline = article.h2.a.text
    print(headline)

    summary = article.find('div',class_='entry-content').p.text
    print(summary)
    
    vid_src = article.find('iframe',class_='youtube-player')['src']
    
    vid_id = vid_src.split('/')[4]
    vid_id = vid_id.split('?')[0]
    
    yt_link = f'https://youtube.com/watch?v={vid_id}'
    print(yt_link)
    
    print()


'''
Python Tutorial: Zip Files – Creating and Extracting Zip Archives
In this video, we will be learning how to create and extract zip archives. We will start by using the zipfile module, and then we will see how to do this using the shutil module. We will learn how to do this with single files and directories, as well as learning how to use gzip as well. Let’s get started…
https://youtube.com/watch?v=z0gguhEmWiY

Python Data Science Tutorial: Analyzing the 2019 Stack Overflow Developer Survey
In this Python Programming video, we will be learning how to download and analyze real-world data from the 2019 Stack Overflow Developer Survey. This is terrific practice for anyone getting into the data science field. We will learn different ways to analyze this data and also some best practices. Let’s get started…
https://youtube.com/watch?v=_P7X8tMplsw

Python Multiprocessing Tutorial: Run Code in Parallel Using the Multiprocessing Module
In this Python Programming video, we will be learning how to run code in parallel using the multiprocessing module. We will also look at how to process multiple high-resolution images at the same time using a ProcessPoolExecutor from the concurrent.futures module. Let’s get started…
https://youtube.com/watch?v=fKl2JW_qrso

Python Threading Tutorial: Run Code Concurrently Using the Threading Module
In this Python Programming video, we will be learning how to run threads concurrently using the threading module. We will also look at how to download multiple high-resolution images online using a ThreadPoolExecutor from the concurrent.futures module. Let’s get started…
https://youtube.com/watch?v=IEEhzQoKtQU

Update (2019-09-03)
Hey everyone. I wanted to give you an update on my videos. I will be releasing videos on threading and multiprocessing within the next week. Thanks so much for your patience. I currently have a temporary recording studio setup at my Airbnb that will allow me to record and edit the threading/multiprocessing videos. I am going to be moving into my new house in 10 days and once I have my recording studio setup then you can expect much faster video releases. I really appreciate how patient everyone has been while I go through this move, especially those of you who are contributing monthly through YouTube 
'''


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Comprehension

ascii_value = [65,66,67,68,69]
char = ['a','b','c','d','e']
my_dic = {char:ascii_value+32 for char,ascii_value in zip(char,ascii_value) if char!='c'}
print(my_dic)
output:
{'a': 97, 'b': 98, 'd': 100, 'e': 101}

""""""""""""""""""""""""Class""""""""""""""""""""""""""""""""""""""""""""

class Point:
    def __init__(self,x,y):
        self.x = x
        self.y = y
        
    def move(self):
        print("move")
    def draw(self):
        print("draw")

point = Point(10,20)
print(point.x)


class Person:
    def __init__(self,name):
        self.name = name
        
    def talk(self):
        print(f"Hi, I am {self.name}")

mahi = Person("mahesh")
mahi.talk()
bob = Person("Bob person")
bob.talk()

OUTPUT:
    Hi, I am mahesh
    Hi, I am Bob person
    
class Mammal:
    def walk(self):
        print("walk")
    def sleep(self):
        print("sleep")
    def eat(self):
        print("eat")
        
class Dog(Mammal):
    def bark(self):
        print("bark")
    

class Cat(Mammal):
    pass

dog1 = Dog()
dog1.walk()
dog1.bark()
cat1 = Cat()
cat1.eat()

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

import requests

r = requests.get('https://www.w3schools.com/python/python_pip.asp')

print(r.headers)


#r.ok this prints true which have the <400
#200 - success
#300 - redirect
#400 - server errors



"""""""""""""""BeautifulSoup"""""""""""""""""""""""""""""""""""""""""""""""""""""

*******importing the file from the current directory*********

gaddam-mahesh:~/environment $ cd portfolio-website
gaddam-mahesh:~/environment/portfolio-website (master) $ cd assignment-16
gaddam-mahesh:~/environment/portfolio-website/assignment-16 (master) $ python3
Python 3.6.8 (default, Aug  2 2019, 17:42:44) 
[GCC 4.8.5 20150623 (Red Hat 4.8.5-28)] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> import requests                                                                                                    
>>> from bs4 import BeautifulSoup
     soup = BeautifulSoup(html_file,'lxml')
  
>>> print(soup.h1)
<h1>
        OUR APPROACH
      </h1>
>>> print(soup.h1.text)

        OUR APPROACH
      
>>> print(soup.prettify())
<!DOCTYPE html>
<html>
 <head>
  <title>
   Assignment-16
  </title>
  <meta charset="utf-8"/>
  <meta content="width=device-width, initial-scale=1, shrink-to-fit=no" name="viewport"/>
  <link href="../bootstrap/bootstrap.min.css" rel="stylesheet"/>
  <script src="../bootstrap/jquery.min.js">
  </script>
  <script src="../bootstrap/popper.min.js">
  </script>
  <script src="../bootstrap/bootstrap.min.js">
  </script>
  <link href="assignment16.css" rel="stylesheet" type="text/css"/>
  <style>
   @media screen and (max-width: 767px) {
        .div2-mdd {
          display: none;
        }
        .appr {
          text-align: center;
          border-bottom: 1px solid lightgrey;
        }
      }

      @media screen and (min-width: 768px) {
        .appr {
          text-align: center;
          border-bottom: 1px solid lightgrey;
        }
        .div1-smd {
          display: none;
        }
        body {
          font-size: 0px;
        }
        .div2-mdd {
          width: 50%;
          display: inline-block;
        }
        .div3-smd-mdd {
          width: 50%;
          display: inline-block;
        }
        .par {
          font-size: 16px;
          color: grey;
        }
      }
  </style>
 </head>
 <body>
  <div class="appr">
   <h1>
    OUR APPROACH
   </h1>
  </div>
  <div class="div1-smd">
   <h2>
    Building Global Startups
   </h2>
   <p>
    We provide end-to-end assistance to startups and develop them into global companies. We give equal importance to Purpose Driven Social Enterprises, Profit Driven Enterprises and Non-Profits.
   </p>
  </div>
  <div class="div2-mdd">
   <h2>
    Creating Workforce for 4.0
   </h2>
   <p class="par">
    iB Hubs commits to create a powerful workforce with all the necessary tools and techniques to thrive in this new wave of transformation.
   </p>
  </div>
  <div class="div3-smd-mdd">
   <h2>
    Developing World-class Products
   </h2>
   <p class="par">
    iB Hubs' cutting-edge R&amp;D in 4.0 technologies combined with a strong enterpreneurial focus will enable the development of world-class products and services that impact billions of lives.
   </p>
  </div>
 </body>
</html>

>>> print(soup.title.text)
Assignment-16
>>> match = soup.title
>>> match
<title>Assignment-16</title>
>>> match = soup.title.text
>>> match
'Assignment-16'


*****************Requesting from HTML Page*******************
import requests
from bs4 import BeautifulSoup

source = requests.get('http://coreyms.com').text

soup = BeautifulSoup(source,'lxml')

article = soup.find('article')
#print(article.prettify())


#headline = article.h2.a.text
#print(headline)

#summary = article.find('div',class_='entry-content').p.text
#print(summary)
'''
****Summary*****
In this video, we will be learning how to create and extract zip archives. 
We will start by using the zipfile module, and then we will see how to do this using the shutil module. 
We will learn how to do this with single files and directories, as well as learning how to use gzip as well.
Let’s get started…
'''

vid_source = article.find('iframe',class_ = 'youtube-player')['src']
#print(vid_source)


'''
https://www.youtube.com/embed/z0gguhEmWiY?version=3&rel=1&fs=1&autohide=2&showsearch=0&showinfo=1&iv_load_policy=1&wmode=transparent'''
vid_id = vid_source.split('/')[4]
#vid_id = vid_id.split('?')[0]  -- z0gguhEmWiY

#print(vid_id)
#['https:', '', 'www.youtube.com', 'embed', 'z0gguhEmWiY?version=3&rel=1&fs=1&autohide=2&showsearch=0&showinfo=1&iv_load_policy=1&wmode=transparent']
print(vid_id)

#['https:', '', 'www.youtube.com', 'embed', 'z0gguhEmWiY?version=3&rel=1&fs=1&autohide=2&showsearch=0&showinfo=1&iv_load_policy=1&wmode=transparent']
yt_link = f'https://youtube.com/watch?v={vid_id}'
print(yt_link)
#print(vid_id)
